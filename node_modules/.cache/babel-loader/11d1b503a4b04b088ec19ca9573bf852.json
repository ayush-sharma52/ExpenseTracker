{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\react.js\\\\01-starting-setup\\\\src\\\\components\\\\Expense\\\\ExpensesList.js\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport './ExpensesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpensesList = props => {\n  if (props.list.length === 0) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"expenses-list__fallback\",\n    children: \"No Expense To Show\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"expenses-list\",\n    children: props.list.map(Expense =>\n    /*#__PURE__*/\n    //here we are using js but this function will return jsx code thus it is valid\n    _jsxDEV(ExpenseItem, {\n      //to prevent re-rendering(state-change) of whole list because react identify each item as same \n      // and add the new item in last and then again compare all items to the items array and re-render\n      title: Expense.title,\n      amount: Expense.amount,\n      date: Expense.date\n    }, Expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ExpensesList;\nexport default ExpensesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesList\");","map":{"version":3,"names":["ExpenseItem","ExpensesList","props","list","length","map","Expense","title","amount","date","id"],"sources":["D:/web/react.js/01-starting-setup/src/components/Expense/ExpensesList.js"],"sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\r\nimport './ExpensesList.css';\r\nconst ExpensesList=props=>{\r\n\r\n    if(props.list.length===0)\r\n    return <h2 className=\"expenses-list__fallback\">No Expense To Show</h2>;\r\n\r\n    return (\r\n        <ul className=\"expenses-list\">\r\n        {props.list.map((Expense) =>\r\n       //here we are using js but this function will return jsx code thus it is valid\r\n          <ExpenseItem\r\n            key={Expense.id}  //to prevent re-rendering(state-change) of whole list because react identify each item as same \r\n            // and add the new item in last and then again compare all items to the items array and re-render\r\n            title={Expense.title}\r\n            amount={Expense.amount}\r\n            date={Expense.date}\r\n          />\r\n        )}\r\n        </ul>\r\n    );\r\n    \r\n}\r\nexport default ExpensesList;"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAO,oBAAP;;;AACA,MAAMC,YAAY,GAACC,KAAK,IAAE;EAEtB,IAAGA,KAAK,CAACC,IAAN,CAAWC,MAAX,KAAoB,CAAvB,EACA,oBAAO;IAAI,SAAS,EAAC,yBAAd;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EAEA,oBACI;IAAI,SAAS,EAAC,eAAd;IAAA,UACCF,KAAK,CAACC,IAAN,CAAWE,GAAX,CAAgBC,OAAD;IAAA;IACjB;IACG,QAAC,WAAD;MACoB;MAClB;MACA,KAAK,EAAEA,OAAO,CAACC,KAHjB;MAIE,MAAM,EAAED,OAAO,CAACE,MAJlB;MAKE,IAAI,EAAEF,OAAO,CAACG;IALhB,GACOH,OAAO,CAACI,EADf;MAAA;MAAA;MAAA;IAAA,QAFD;EADD;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH,CApBD;;KAAMT,Y;AAqBN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}