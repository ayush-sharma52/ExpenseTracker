{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\react.js\\\\01-starting-setup\\\\src\\\\components\\\\Expense\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpenseItem from \"./ExpenseItem.js\";\nimport \"./Expenses.css\";\nimport Card from \"../UI/card.js\";\nimport ExpenseFilter from \"./ExpenseFilter.js\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  function selectedYearHandler(filteredYear) {\n    setFilteredYear(filteredYear);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpenseFilter, {\n        selected: filteredYear,\n        onYearSelected: selectedYearHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this), props.arr.map(Expense =>\n      /*#__PURE__*/\n      //here we are using js but this function will return jsx code thus it is valid\n      _jsxDEV(ExpenseItem, {\n        //to prevent re-rendering(state-change) of whole list because react identify each item as same \n        // and add the new item in last and then again compare all items to the items array and re-render\n        title: Expense.title,\n        amount: Expense.amount,\n        date: Expense.date\n      }, Expense.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["ExpenseItem","Card","ExpenseFilter","useState","Expenses","props","filteredYear","setFilteredYear","selectedYearHandler","arr","map","Expense","title","amount","date","id"],"sources":["D:/web/react.js/01-starting-setup/src/components/Expense/Expenses.js"],"sourcesContent":["import ExpenseItem from \"./ExpenseItem.js\";\r\nimport \"./Expenses.css\";\r\nimport Card from \"../UI/card.js\";\r\nimport ExpenseFilter from \"./ExpenseFilter.js\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Expenses(props) {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  function selectedYearHandler(filteredYear) {\r\n    setFilteredYear(filteredYear);\r\n  }\r\n  \r\n  return (\r\n  <div>\r\n    <Card className=\"expenses\">\r\n      <ExpenseFilter\r\n        selected={filteredYear}\r\n        onYearSelected={selectedYearHandler}\r\n      />\r\n      {props.arr.map((Expense) =>(\r\n       //here we are using js but this function will return jsx code thus it is valid\r\n          <ExpenseItem\r\n            key={Expense.id}  //to prevent re-rendering(state-change) of whole list because react identify each item as same \r\n            // and add the new item in last and then again compare all items to the items array and re-render\r\n            title={Expense.title}\r\n            amount={Expense.amount}\r\n            date={Expense.date}\r\n          />\r\n        ))}\r\n    </Card>\r\n    </div>\r\n  );\r\n}\r\nexport default Expenses;\r\n"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAO,gBAAP;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EACvB,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,MAAD,CAAhD;;EAEA,SAASK,mBAAT,CAA6BF,YAA7B,EAA2C;IACzCC,eAAe,CAACD,YAAD,CAAf;EACD;;EAED,oBACA;IAAA,uBACE,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBACE,QAAC,aAAD;QACE,QAAQ,EAAEA,YADZ;QAEE,cAAc,EAAEE;MAFlB;QAAA;QAAA;QAAA;MAAA,QADF,EAKGH,KAAK,CAACI,GAAN,CAAUC,GAAV,CAAeC,OAAD;MAAA;MACd;MACG,QAAC,WAAD;QACoB;QAClB;QACA,KAAK,EAAEA,OAAO,CAACC,KAHjB;QAIE,MAAM,EAAED,OAAO,CAACE,MAJlB;QAKE,IAAI,EAAEF,OAAO,CAACG;MALhB,GACOH,OAAO,CAACI,EADf;QAAA;QAAA;QAAA;MAAA,QAFH,CALH;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADA;AAoBD;;GA3BQX,Q;;KAAAA,Q;AA4BT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}